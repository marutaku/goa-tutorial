// Code generated by goa v3.14.1, DO NOT EDIT.
//
// calc HTTP client CLI support package
//
// Command:
// $ goa gen calc/design

package client

import (
	calc "calc/gen/calc"
	"encoding/json"
	"fmt"
	"strconv"
)

// BuildMultiplyPayload builds the payload for the calc multiply endpoint from
// CLI flags.
func BuildMultiplyPayload(calcMultiplyA string, calcMultiplyB string) (*calc.MultiplyPayload, error) {
	var err error
	var a int
	{
		var v int64
		v, err = strconv.ParseInt(calcMultiplyA, 10, strconv.IntSize)
		a = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for a, must be INT")
		}
	}
	var b int
	{
		var v int64
		v, err = strconv.ParseInt(calcMultiplyB, 10, strconv.IntSize)
		b = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for b, must be INT")
		}
	}
	v := &calc.MultiplyPayload{}
	v.A = a
	v.B = b

	return v, nil
}

// BuildAdditionPayload builds the payload for the calc addition endpoint from
// CLI flags.
func BuildAdditionPayload(calcAdditionA string, calcAdditionB string) (*calc.AdditionPayload, error) {
	var err error
	var a int
	{
		var v int64
		v, err = strconv.ParseInt(calcAdditionA, 10, strconv.IntSize)
		a = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for a, must be INT")
		}
	}
	var b int
	{
		var v int64
		v, err = strconv.ParseInt(calcAdditionB, 10, strconv.IntSize)
		b = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for b, must be INT")
		}
	}
	v := &calc.AdditionPayload{}
	v.A = a
	v.B = b

	return v, nil
}

// BuildDivisionPayload builds the payload for the calc division endpoint from
// CLI flags.
func BuildDivisionPayload(calcDivisionA string, calcDivisionB string) (*calc.DivisionPayload, error) {
	var err error
	var a int
	{
		var v int64
		v, err = strconv.ParseInt(calcDivisionA, 10, strconv.IntSize)
		a = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for a, must be INT")
		}
	}
	var b int
	{
		var v int64
		v, err = strconv.ParseInt(calcDivisionB, 10, strconv.IntSize)
		b = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for b, must be INT")
		}
	}
	v := &calc.DivisionPayload{}
	v.A = a
	v.B = b

	return v, nil
}

// BuildSubtractionPayload builds the payload for the calc subtraction endpoint
// from CLI flags.
func BuildSubtractionPayload(calcSubtractionA string, calcSubtractionB string) (*calc.SubtractionPayload, error) {
	var err error
	var a int
	{
		var v int64
		v, err = strconv.ParseInt(calcSubtractionA, 10, strconv.IntSize)
		a = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for a, must be INT")
		}
	}
	var b int
	{
		var v int64
		v, err = strconv.ParseInt(calcSubtractionB, 10, strconv.IntSize)
		b = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for b, must be INT")
		}
	}
	v := &calc.SubtractionPayload{}
	v.A = a
	v.B = b

	return v, nil
}

// BuildSquareRootPayload builds the payload for the calc SquareRoot endpoint
// from CLI flags.
func BuildSquareRootPayload(calcSquareRootBody string) (*calc.SquareRootPayload, error) {
	var err error
	var body struct {
		// number
		A *int `form:"a" json:"a" xml:"a"`
	}
	{
		err = json.Unmarshal([]byte(calcSquareRootBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"a\": 1089204046671954241\n   }'")
		}
	}
	v := &calc.SquareRootPayload{}
	if body.A != nil {
		v.A = *body.A
	}

	return v, nil
}
