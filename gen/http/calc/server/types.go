// Code generated by goa v3.14.1, DO NOT EDIT.
//
// calc HTTP server types
//
// Command:
// $ goa gen calc/design

package server

import (
	calc "calc/gen/calc"
)

// MultiplyResponseBody is the type of the "calc" service "multiply" endpoint
// HTTP response body.
type MultiplyResponseBody struct {
	Result int `form:"result" json:"result" xml:"result"`
}

// AdditionResponseBody is the type of the "calc" service "addition" endpoint
// HTTP response body.
type AdditionResponseBody struct {
	Result int `form:"result" json:"result" xml:"result"`
}

// DivisionResponseBody is the type of the "calc" service "division" endpoint
// HTTP response body.
type DivisionResponseBody struct {
	Result float64 `form:"result" json:"result" xml:"result"`
}

// SubtractionResponseBody is the type of the "calc" service "subtraction"
// endpoint HTTP response body.
type SubtractionResponseBody struct {
	Result int `form:"result" json:"result" xml:"result"`
}

// SquareRootResponseBody is the type of the "calc" service "SquareRoot"
// endpoint HTTP response body.
type SquareRootResponseBody struct {
	Result float64 `form:"result" json:"result" xml:"result"`
}

// NewMultiplyResponseBody builds the HTTP response body from the result of the
// "multiply" endpoint of the "calc" service.
func NewMultiplyResponseBody(res *calc.MultiplyResult) *MultiplyResponseBody {
	body := &MultiplyResponseBody{
		Result: res.Result,
	}
	return body
}

// NewAdditionResponseBody builds the HTTP response body from the result of the
// "addition" endpoint of the "calc" service.
func NewAdditionResponseBody(res *calc.AdditionResult) *AdditionResponseBody {
	body := &AdditionResponseBody{
		Result: res.Result,
	}
	return body
}

// NewDivisionResponseBody builds the HTTP response body from the result of the
// "division" endpoint of the "calc" service.
func NewDivisionResponseBody(res *calc.DivisionResult) *DivisionResponseBody {
	body := &DivisionResponseBody{
		Result: res.Result,
	}
	return body
}

// NewSubtractionResponseBody builds the HTTP response body from the result of
// the "subtraction" endpoint of the "calc" service.
func NewSubtractionResponseBody(res *calc.SubtractionResult) *SubtractionResponseBody {
	body := &SubtractionResponseBody{
		Result: res.Result,
	}
	return body
}

// NewSquareRootResponseBody builds the HTTP response body from the result of
// the "SquareRoot" endpoint of the "calc" service.
func NewSquareRootResponseBody(res *calc.SquareRootResult) *SquareRootResponseBody {
	body := &SquareRootResponseBody{
		Result: res.Result,
	}
	return body
}

// NewMultiplyPayload builds a calc service multiply endpoint payload.
func NewMultiplyPayload(a int, b int) *calc.MultiplyPayload {
	v := &calc.MultiplyPayload{}
	v.A = a
	v.B = b

	return v
}

// NewAdditionPayload builds a calc service addition endpoint payload.
func NewAdditionPayload(a int, b int) *calc.AdditionPayload {
	v := &calc.AdditionPayload{}
	v.A = a
	v.B = b

	return v
}

// NewDivisionPayload builds a calc service division endpoint payload.
func NewDivisionPayload(a int, b int) *calc.DivisionPayload {
	v := &calc.DivisionPayload{}
	v.A = a
	v.B = b

	return v
}

// NewSubtractionPayload builds a calc service subtraction endpoint payload.
func NewSubtractionPayload(a int, b int) *calc.SubtractionPayload {
	v := &calc.SubtractionPayload{}
	v.A = a
	v.B = b

	return v
}

// NewSquareRootPayload builds a calc service SquareRoot endpoint payload.
func NewSquareRootPayload(body struct {
	// number
	A *int `form:"a" json:"a" xml:"a"`
}) *calc.SquareRootPayload {
	v := &calc.SquareRootPayload{}
	if body.A != nil {
		v.A = *body.A
	}

	return v
}
