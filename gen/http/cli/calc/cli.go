// Code generated by goa v3.14.1, DO NOT EDIT.
//
// calc HTTP client CLI support package
//
// Command:
// $ goa gen calc/design

package cli

import (
	calcc "calc/gen/http/calc/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `calc (multiply|addition|division|subtraction|square-root)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` calc multiply --a 4288748512599820841 --b 4212629202012168060` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		calcFlags = flag.NewFlagSet("calc", flag.ContinueOnError)

		calcMultiplyFlags = flag.NewFlagSet("multiply", flag.ExitOnError)
		calcMultiplyAFlag = calcMultiplyFlags.String("a", "REQUIRED", "Left operand")
		calcMultiplyBFlag = calcMultiplyFlags.String("b", "REQUIRED", "Right operand")

		calcAdditionFlags = flag.NewFlagSet("addition", flag.ExitOnError)
		calcAdditionAFlag = calcAdditionFlags.String("a", "REQUIRED", "Left operand")
		calcAdditionBFlag = calcAdditionFlags.String("b", "REQUIRED", "Right operand")

		calcDivisionFlags = flag.NewFlagSet("division", flag.ExitOnError)
		calcDivisionAFlag = calcDivisionFlags.String("a", "REQUIRED", "Left operand")
		calcDivisionBFlag = calcDivisionFlags.String("b", "REQUIRED", "Right operand")

		calcSubtractionFlags = flag.NewFlagSet("subtraction", flag.ExitOnError)
		calcSubtractionAFlag = calcSubtractionFlags.String("a", "REQUIRED", "Left operand")
		calcSubtractionBFlag = calcSubtractionFlags.String("b", "REQUIRED", "Right operand")

		calcSquareRootFlags    = flag.NewFlagSet("square-root", flag.ExitOnError)
		calcSquareRootBodyFlag = calcSquareRootFlags.String("body", "REQUIRED", "")
	)
	calcFlags.Usage = calcUsage
	calcMultiplyFlags.Usage = calcMultiplyUsage
	calcAdditionFlags.Usage = calcAdditionUsage
	calcDivisionFlags.Usage = calcDivisionUsage
	calcSubtractionFlags.Usage = calcSubtractionUsage
	calcSquareRootFlags.Usage = calcSquareRootUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "calc":
			svcf = calcFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "calc":
			switch epn {
			case "multiply":
				epf = calcMultiplyFlags

			case "addition":
				epf = calcAdditionFlags

			case "division":
				epf = calcDivisionFlags

			case "subtraction":
				epf = calcSubtractionFlags

			case "square-root":
				epf = calcSquareRootFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "calc":
			c := calcc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "multiply":
				endpoint = c.Multiply()
				data, err = calcc.BuildMultiplyPayload(*calcMultiplyAFlag, *calcMultiplyBFlag)
			case "addition":
				endpoint = c.Addition()
				data, err = calcc.BuildAdditionPayload(*calcAdditionAFlag, *calcAdditionBFlag)
			case "division":
				endpoint = c.Division()
				data, err = calcc.BuildDivisionPayload(*calcDivisionAFlag, *calcDivisionBFlag)
			case "subtraction":
				endpoint = c.Subtraction()
				data, err = calcc.BuildSubtractionPayload(*calcSubtractionAFlag, *calcSubtractionBFlag)
			case "square-root":
				endpoint = c.SquareRoot()
				data, err = calcc.BuildSquareRootPayload(*calcSquareRootBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// calcUsage displays the usage of the calc command and its subcommands.
func calcUsage() {
	fmt.Fprintf(os.Stderr, `The calc service performs operations on numbers.
Usage:
    %[1]s [globalflags] calc COMMAND [flags]

COMMAND:
    multiply: Multiply implements multiply.
    addition: Addition implements addition.
    division: Division implements division.
    subtraction: Subtraction implements subtraction.
    square-root: SquareRoot implements SquareRoot.

Additional help:
    %[1]s calc COMMAND --help
`, os.Args[0])
}
func calcMultiplyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] calc multiply -a INT -b INT

Multiply implements multiply.
    -a INT: Left operand
    -b INT: Right operand

Example:
    %[1]s calc multiply --a 4288748512599820841 --b 4212629202012168060
`, os.Args[0])
}

func calcAdditionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] calc addition -a INT -b INT

Addition implements addition.
    -a INT: Left operand
    -b INT: Right operand

Example:
    %[1]s calc addition --a 1385266597691519195 --b 686605435966370186
`, os.Args[0])
}

func calcDivisionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] calc division -a INT -b INT

Division implements division.
    -a INT: Left operand
    -b INT: Right operand

Example:
    %[1]s calc division --a 7309877832173772408 --b 3237209857320107068
`, os.Args[0])
}

func calcSubtractionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] calc subtraction -a INT -b INT

Subtraction implements subtraction.
    -a INT: Left operand
    -b INT: Right operand

Example:
    %[1]s calc subtraction --a 8723986392256123438 --b 9092197569596372935
`, os.Args[0])
}

func calcSquareRootUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] calc square-root -body JSON

SquareRoot implements SquareRoot.
    -body JSON: 

Example:
    %[1]s calc square-root --body '{
      "a": 1089204046671954241
   }'
`, os.Args[0])
}
