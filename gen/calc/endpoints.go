// Code generated by goa v3.14.1, DO NOT EDIT.
//
// calc endpoints
//
// Command:
// $ goa gen calc/design

package calc

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "calc" service endpoints.
type Endpoints struct {
	Multiply    goa.Endpoint
	Addition    goa.Endpoint
	Division    goa.Endpoint
	Subtraction goa.Endpoint
	SquareRoot  goa.Endpoint
}

// NewEndpoints wraps the methods of the "calc" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Multiply:    NewMultiplyEndpoint(s),
		Addition:    NewAdditionEndpoint(s),
		Division:    NewDivisionEndpoint(s),
		Subtraction: NewSubtractionEndpoint(s),
		SquareRoot:  NewSquareRootEndpoint(s),
	}
}

// Use applies the given middleware to all the "calc" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Multiply = m(e.Multiply)
	e.Addition = m(e.Addition)
	e.Division = m(e.Division)
	e.Subtraction = m(e.Subtraction)
	e.SquareRoot = m(e.SquareRoot)
}

// NewMultiplyEndpoint returns an endpoint function that calls the method
// "multiply" of service "calc".
func NewMultiplyEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*MultiplyPayload)
		return s.Multiply(ctx, p)
	}
}

// NewAdditionEndpoint returns an endpoint function that calls the method
// "addition" of service "calc".
func NewAdditionEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AdditionPayload)
		return s.Addition(ctx, p)
	}
}

// NewDivisionEndpoint returns an endpoint function that calls the method
// "division" of service "calc".
func NewDivisionEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DivisionPayload)
		return s.Division(ctx, p)
	}
}

// NewSubtractionEndpoint returns an endpoint function that calls the method
// "subtraction" of service "calc".
func NewSubtractionEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SubtractionPayload)
		return s.Subtraction(ctx, p)
	}
}

// NewSquareRootEndpoint returns an endpoint function that calls the method
// "SquareRoot" of service "calc".
func NewSquareRootEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SquareRootPayload)
		return s.SquareRoot(ctx, p)
	}
}
