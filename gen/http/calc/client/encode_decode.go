// Code generated by goa v3.14.1, DO NOT EDIT.
//
// calc HTTP client encoders and decoders
//
// Command:
// $ goa gen calc/design

package client

import (
	"bytes"
	calc "calc/gen/calc"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildMultiplyRequest instantiates a HTTP request object with method and path
// set to call the "calc" service "multiply" endpoint
func (c *Client) BuildMultiplyRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		a int
		b int
	)
	{
		p, ok := v.(*calc.MultiplyPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("calc", "multiply", "*calc.MultiplyPayload", v)
		}
		a = p.A
		b = p.B
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MultiplyCalcPath(a, b)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("calc", "multiply", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeMultiplyResponse returns a decoder for responses returned by the calc
// multiply endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeMultiplyResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body MultiplyResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calc", "multiply", err)
			}
			err = ValidateMultiplyResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("calc", "multiply", err)
			}
			res := NewMultiplyResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("calc", "multiply", resp.StatusCode, string(body))
		}
	}
}

// BuildAdditionRequest instantiates a HTTP request object with method and path
// set to call the "calc" service "addition" endpoint
func (c *Client) BuildAdditionRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		a int
		b int
	)
	{
		p, ok := v.(*calc.AdditionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("calc", "addition", "*calc.AdditionPayload", v)
		}
		a = p.A
		b = p.B
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdditionCalcPath(a, b)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("calc", "addition", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAdditionResponse returns a decoder for responses returned by the calc
// addition endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeAdditionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AdditionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calc", "addition", err)
			}
			err = ValidateAdditionResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("calc", "addition", err)
			}
			res := NewAdditionResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("calc", "addition", resp.StatusCode, string(body))
		}
	}
}

// BuildDivisionRequest instantiates a HTTP request object with method and path
// set to call the "calc" service "division" endpoint
func (c *Client) BuildDivisionRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		a int
		b int
	)
	{
		p, ok := v.(*calc.DivisionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("calc", "division", "*calc.DivisionPayload", v)
		}
		a = p.A
		b = p.B
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DivisionCalcPath(a, b)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("calc", "division", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDivisionResponse returns a decoder for responses returned by the calc
// division endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeDivisionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DivisionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calc", "division", err)
			}
			err = ValidateDivisionResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("calc", "division", err)
			}
			res := NewDivisionResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("calc", "division", resp.StatusCode, string(body))
		}
	}
}

// BuildSubtractionRequest instantiates a HTTP request object with method and
// path set to call the "calc" service "subtraction" endpoint
func (c *Client) BuildSubtractionRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		a int
		b int
	)
	{
		p, ok := v.(*calc.SubtractionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("calc", "subtraction", "*calc.SubtractionPayload", v)
		}
		a = p.A
		b = p.B
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SubtractionCalcPath(a, b)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("calc", "subtraction", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeSubtractionResponse returns a decoder for responses returned by the
// calc subtraction endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeSubtractionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SubtractionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calc", "subtraction", err)
			}
			err = ValidateSubtractionResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("calc", "subtraction", err)
			}
			res := NewSubtractionResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("calc", "subtraction", resp.StatusCode, string(body))
		}
	}
}

// BuildSquareRootRequest instantiates a HTTP request object with method and
// path set to call the "calc" service "SquareRoot" endpoint
func (c *Client) BuildSquareRootRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SquareRootCalcPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("calc", "SquareRoot", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSquareRootRequest returns an encoder for requests sent to the calc
// SquareRoot server.
func EncodeSquareRootRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*calc.SquareRootPayload)
		if !ok {
			return goahttp.ErrInvalidType("calc", "SquareRoot", "*calc.SquareRootPayload", v)
		}
		body := p
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("calc", "SquareRoot", err)
		}
		return nil
	}
}

// DecodeSquareRootResponse returns a decoder for responses returned by the
// calc SquareRoot endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeSquareRootResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SquareRootResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calc", "SquareRoot", err)
			}
			err = ValidateSquareRootResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("calc", "SquareRoot", err)
			}
			res := NewSquareRootResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("calc", "SquareRoot", resp.StatusCode, string(body))
		}
	}
}
