// Code generated by goa v3.14.1, DO NOT EDIT.
//
// calc HTTP client types
//
// Command:
// $ goa gen calc/design

package client

import (
	calc "calc/gen/calc"

	goa "goa.design/goa/v3/pkg"
)

// MultiplyResponseBody is the type of the "calc" service "multiply" endpoint
// HTTP response body.
type MultiplyResponseBody struct {
	Result *int `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// AdditionResponseBody is the type of the "calc" service "addition" endpoint
// HTTP response body.
type AdditionResponseBody struct {
	Result *int `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// DivisionResponseBody is the type of the "calc" service "division" endpoint
// HTTP response body.
type DivisionResponseBody struct {
	Result *float64 `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// SubtractionResponseBody is the type of the "calc" service "subtraction"
// endpoint HTTP response body.
type SubtractionResponseBody struct {
	Result *int `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// SquareRootResponseBody is the type of the "calc" service "SquareRoot"
// endpoint HTTP response body.
type SquareRootResponseBody struct {
	Result *float64 `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// NewMultiplyResultOK builds a "calc" service "multiply" endpoint result from
// a HTTP "OK" response.
func NewMultiplyResultOK(body *MultiplyResponseBody) *calc.MultiplyResult {
	v := &calc.MultiplyResult{
		Result: *body.Result,
	}

	return v
}

// NewAdditionResultOK builds a "calc" service "addition" endpoint result from
// a HTTP "OK" response.
func NewAdditionResultOK(body *AdditionResponseBody) *calc.AdditionResult {
	v := &calc.AdditionResult{
		Result: *body.Result,
	}

	return v
}

// NewDivisionResultOK builds a "calc" service "division" endpoint result from
// a HTTP "OK" response.
func NewDivisionResultOK(body *DivisionResponseBody) *calc.DivisionResult {
	v := &calc.DivisionResult{
		Result: *body.Result,
	}

	return v
}

// NewSubtractionResultOK builds a "calc" service "subtraction" endpoint result
// from a HTTP "OK" response.
func NewSubtractionResultOK(body *SubtractionResponseBody) *calc.SubtractionResult {
	v := &calc.SubtractionResult{
		Result: *body.Result,
	}

	return v
}

// NewSquareRootResultOK builds a "calc" service "SquareRoot" endpoint result
// from a HTTP "OK" response.
func NewSquareRootResultOK(body *SquareRootResponseBody) *calc.SquareRootResult {
	v := &calc.SquareRootResult{
		Result: *body.Result,
	}

	return v
}

// ValidateMultiplyResponseBody runs the validations defined on
// MultiplyResponseBody
func ValidateMultiplyResponseBody(body *MultiplyResponseBody) (err error) {
	if body.Result == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("result", "body"))
	}
	return
}

// ValidateAdditionResponseBody runs the validations defined on
// AdditionResponseBody
func ValidateAdditionResponseBody(body *AdditionResponseBody) (err error) {
	if body.Result == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("result", "body"))
	}
	return
}

// ValidateDivisionResponseBody runs the validations defined on
// DivisionResponseBody
func ValidateDivisionResponseBody(body *DivisionResponseBody) (err error) {
	if body.Result == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("result", "body"))
	}
	return
}

// ValidateSubtractionResponseBody runs the validations defined on
// SubtractionResponseBody
func ValidateSubtractionResponseBody(body *SubtractionResponseBody) (err error) {
	if body.Result == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("result", "body"))
	}
	return
}

// ValidateSquareRootResponseBody runs the validations defined on
// SquareRootResponseBody
func ValidateSquareRootResponseBody(body *SquareRootResponseBody) (err error) {
	if body.Result == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("result", "body"))
	}
	return
}
